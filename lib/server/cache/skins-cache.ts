import {
  getAllSkinsServerData,
  getSkinsServerData,
} from '../data/skins/getSkinsServerData'
import { Skin, SkinType } from '@/lib/types/skin'
// eslint-disable-next-line camelcase
import { revalidatePath, revalidateTag, unstable_cache } from 'next/cache'

let skinsCache: {
  skins: Skin[]
  skinTypes: SkinType[]
  lastUpdate: number
  ttl: number
} | null = null

let isUpdating = false
let updatePromise: Promise<void> | null = null

const CACHE_TTL = process.env.NODE_ENV === 'development' ? 0 : 2 * 60 * 1000 // 2 min em produ√ß√£o, sem cache em dev

// Tags de cache para invalida√ß√£o
const SKINS_CACHE_TAG = 'skins-data'
const SKIN_TYPES_CACHE_TAG = 'skin-types-data'

/**
 * Fun√ß√£o com cache tagged para buscar todas as skins
 */
const getCachedAllSkins = unstable_cache(
  async () => {
    console.log('üîÑ Buscando dados de todas as skins (sem cache)...')
    return await getAllSkinsServerData()
  },
  ['all-skins'],
  {
    tags: [SKINS_CACHE_TAG],
    revalidate: 300, // 5 minutos
  },
)

/**
 * Fun√ß√£o com cache tagged para buscar tipos de skins
 */
const getCachedSkinTypes = unstable_cache(
  async () => {
    console.log('üîÑ Buscando tipos de skins (sem cache)...')
    return await getSkinsServerData()
  },
  ['skin-types'],
  {
    tags: [SKIN_TYPES_CACHE_TAG],
    revalidate: 300, // 5 minutos
  },
)

/**
 * Fun√ß√£o p√∫blica para buscar skins com cache tags (para usar no layout)
 */
export async function getCachedSkinsForLayout() {
  console.log('üè† Buscando dados das skins para o layout...')

  try {
    const [allSkinsData, skinsData] = await Promise.all([
      getCachedAllSkins(),
      getCachedSkinTypes(),
    ])

    console.log('‚úÖ Dados carregados para layout:', {
      skinsCount: allSkinsData.skins.length,
      skinTypesCount: skinsData.skinTypes.length,
    })

    return {
      skins: allSkinsData.skins,
      skinTypes: skinsData.skinTypes,
    }
  } catch (error) {
    console.error('‚ùå Erro ao buscar dados para layout:', error)
    // Fallback para o m√©todo antigo se derro
    return await getCachedSkins()
  }
}

export async function getCachedSkins(forceRefresh = false) {
  const now = Date.now()

  console.log('üîç getCachedSkins chamado:', {
    forceRefresh,
    hasCache: !!skinsCache,
    cacheAge: skinsCache ? now - skinsCache.lastUpdate : null,
    ttl: CACHE_TTL,
    isExpired: skinsCache ? now - skinsCache.lastUpdate > skinsCache.ttl : null,
  })

  if (
    !skinsCache ||
    now - skinsCache.lastUpdate > skinsCache.ttl ||
    forceRefresh
  ) {
    console.log('üîÑ Cache inv√°lido ou refresh for√ßado, atualizando...')

    if (isUpdating && updatePromise) {
      console.log('‚è≥ Aguardando atualiza√ß√£o em andamento...')
      await updatePromise
      return {
        skins: skinsCache!.skins,
        skinTypes: skinsCache!.skinTypes,
      }
    }

    isUpdating = true
    console.log('üöÄ Iniciando busca de dados das skins...')

    updatePromise = Promise.all([getCachedAllSkins(), getCachedSkinTypes()])
      .then(([allSkinsData, skinsData]) => {
        console.log('üì¶ Dados recebidos:', {
          skinsCount: allSkinsData.skins.length,
          skinTypesCount: skinsData.skinTypes.length,
        })

        skinsCache = {
          skins: allSkinsData.skins,
          skinTypes: skinsData.skinTypes,
          lastUpdate: Date.now(),
          ttl: CACHE_TTL,
        }

        console.log('‚úÖ Cache atualizado com sucesso')
      })
      .catch((error) => {
        console.error('‚ùå Erro ao atualizar cache:', error)
        throw error
      })
      .finally(() => {
        isUpdating = false
        updatePromise = null
        console.log('üèÅ Atualiza√ß√£o finalizada')
      })

    await updatePromise
  } else {
    console.log('‚úÖ Usando cache existente')
  }

  return {
    skins: skinsCache!.skins,
    skinTypes: skinsCache!.skinTypes,
  }
}

/**
 * Invalida o cache das skins for√ßando uma nova busca
 */
export function invalidateSkinsCache() {
  console.log('üóëÔ∏è  Invalidando cache das skins...')

  const hadCache = !!skinsCache
  const cacheInfo = skinsCache
    ? {
        skinsCount: skinsCache.skins.length,
        skinTypesCount: skinsCache.skinTypes.length,
        age: Date.now() - skinsCache.lastUpdate,
      }
    : null

  skinsCache = null
  isUpdating = false
  updatePromise = null

  console.log('‚úÖ Cache invalidado:', { hadCache, cacheInfo })
}

/**
 * Invalida o cache das skins usando tags (melhor para ISR)
 */
export async function invalidateSkinsWithTags() {
  console.log('üîÑ Invalidando cache das skins usando tags...')

  // Invalida o cache em mem√≥ria
  invalidateSkinsCache()

  try {
    // Invalida as tags de cache espec√≠ficas
    revalidateTag(SKINS_CACHE_TAG)
    revalidateTag(SKIN_TYPES_CACHE_TAG)
    console.log('‚úÖ Tags de cache invalidadas:', [
      SKINS_CACHE_TAG,
      SKIN_TYPES_CACHE_TAG,
    ])

    // Tamb√©m revalida as p√°ginas como fallback
    revalidatePath('/', 'page')
    revalidatePath('/', 'layout')
    console.log('‚úÖ P√°ginas revalidadas')
  } catch (error) {
    console.error('‚ùå Erro ao invalidar tags de cache:', error)
  }
}

/**
 * Invalida o cache das skins e revalida as p√°ginas do Next.js
 */
export async function invalidateSkinsAndRevalidate() {
  console.log('üîÑ Invalidando cache e revalidando p√°ginas...')

  // Invalida o cache em mem√≥ria
  invalidateSkinsCache()

  // Revalida as p√°ginas do Next.js para for√ßar regenera√ß√£o
  try {
    const pathsToRevalidate = [
      '/', // p√°gina inicial
      '/skins', // se houver uma p√°gina de skins espec√≠fica
    ]

    for (const path of pathsToRevalidate) {
      revalidatePath(path, 'page')
      console.log(`‚úÖ P√°gina ${path} revalidada`)
    }

    // Tamb√©m revalida o layout para garantir que os dados s√£o atualizados
    revalidatePath('/', 'layout')
    console.log('‚úÖ Layout revalidado')

    // Em produ√ß√£o, for√ßa revalida√ß√£o adicional
    if (process.env.NODE_ENV === 'production') {
      // Revalida todas as rotas est√°ticas que podem estar cacheadas
      revalidatePath('/', 'layout')
      revalidatePath('/')
      console.log('‚úÖ Revalida√ß√£o adicional para produ√ß√£o executada')
    }
  } catch (error) {
    console.error('‚ùå Erro ao revalidar p√°ginas:', error)
  }
}

/**
 * Invalida o cache das skins e revalida as p√°ginas do Next.js com abordagem mais agressiva para produ√ß√£o
 */
export async function forceInvalidateForProduction() {
  console.log('üîÑ Invalida√ß√£o agressiva para produ√ß√£o...')

  // Invalida o cache em mem√≥ria
  invalidateSkinsCache()

  try {
    // Revalida m√∫ltiplas vezes para garantir que funcione
    const paths = ['/', '/skins', '/admin']

    for (const path of paths) {
      // Revalida como p√°gina
      revalidatePath(path, 'page')
      // Revalida como layout tamb√©m
      revalidatePath(path, 'layout')
      console.log(`‚úÖ P√°gina ${path} revalidada (p√°gina e layout)`)
    }

    // For√ßa revalida√ß√£o da raiz m√∫ltiplas vezes
    revalidatePath('/')
    revalidatePath('/', 'page')
    revalidatePath('/', 'layout')

    console.log('‚úÖ Invalida√ß√£o agressiva para produ√ß√£o conclu√≠da')
  } catch (error) {
    console.error('‚ùå Erro na invalida√ß√£o agressiva:', error)
  }
}

/**
 * For√ßa a atualiza√ß√£o do cache das skins
 */
export async function refreshSkinsCache() {
  console.log('üîÑ For√ßando refresh do cache das skins...')
  invalidateSkinsCache()
  const result = await getCachedSkins(true)
  console.log('‚úÖ Cache refreshado com sucesso')
  return result
}

/**
 * For√ßa a atualiza√ß√£o do cache das skins e revalida as p√°ginas
 */
export async function refreshSkinsAndRevalidate() {
  console.log('üîÑ For√ßando refresh do cache das skins com revalida√ß√£o...')

  // Invalida o cache atual
  invalidateSkinsCache()

  // Busca novos dados
  const result = await getCachedSkins(true)

  // Revalida as p√°ginas
  try {
    const pathsToRevalidate = [
      '/', // p√°gina inicial
      '/skins', // se houver uma p√°gina de skins espec√≠fica
    ]

    for (const path of pathsToRevalidate) {
      revalidatePath(path, 'page')
      console.log(`‚úÖ P√°gina ${path} revalidada`)
    }

    // Tamb√©m revalida o layout
    revalidatePath('/', 'layout')
    console.log('‚úÖ Layout revalidado')

    // Em produ√ß√£o, for√ßa revalida√ß√£o adicional
    if (process.env.NODE_ENV === 'production') {
      // Revalida todas as rotas est√°ticas que podem estar cacheadas
      revalidatePath('/', 'layout')
      revalidatePath('/')
      console.log('‚úÖ Revalida√ß√£o adicional para produ√ß√£o executada')
    }
  } catch (error) {
    console.error('‚ùå Erro ao revalidar p√°ginas:', error)
  }

  console.log('‚úÖ Cache refreshado e p√°ginas revalidadas com sucesso')
  return result
}
